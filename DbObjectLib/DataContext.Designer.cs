//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 27/02/2014 14:27:57
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DbGobansContext
{

    [DatabaseAttribute(Name = "goban")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DbGobansDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DbGobansDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDbGoban(DbGoban instance);
        partial void UpdateDbGoban(DbGoban instance);
        partial void DeleteDbGoban(DbGoban instance);
        partial void InsertDbJoueur(DbJoueur instance);
        partial void UpdateDbJoueur(DbJoueur instance);
        partial void DeleteDbJoueur(DbJoueur instance);
        partial void InsertDbPartie(DbPartie instance);
        partial void UpdateDbPartie(DbPartie instance);
        partial void DeleteDbPartie(DbPartie instance);
        partial void InsertDbPion(DbPion instance);
        partial void UpdateDbPion(DbPion instance);
        partial void DeleteDbPion(DbPion instance);

        #endregion

        public DbGobansDataContext() :
        base(GetConnectionString("DbGobansDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DbGobansDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DbGobansDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DbGobansDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbGobansDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbGobansDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbGobansDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<DbGoban> DbGobans
        {
            get
            {
                return this.GetTable<DbGoban>();
            }
        }

        public Devart.Data.Linq.Table<DbJoueur> DbJoueurs
        {
            get
            {
                return this.GetTable<DbJoueur>();
            }
        }

        public Devart.Data.Linq.Table<DbPartie> DbParties
        {
            get
            {
                return this.GetTable<DbPartie>();
            }
        }

        public Devart.Data.Linq.Table<DbPion> DbPions
        {
            get
            {
                return this.GetTable<DbPion>();
            }
        }
    }
}

namespace DbGobansContext
{

    /// <summary>
    /// There are no comments for DbGobansContext.DbGoban in the schema.
    /// </summary>
    [Table(Name = @"goban.Goban")]
    public partial class DbGoban : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdGoban;

        private long _IdPartie;

        private long _NumeroCoup;

        private string _NatureCoup = @"Poser";

        private long _JoueurEnCour;
        #pragma warning restore 0649

        private EntityRef<DbPartie> _DbPartie;

        private EntitySet<DbPion> _DbPions;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdGobanChanging(long value);
        partial void OnIdGobanChanged();
        partial void OnIdPartieChanging(long value);
        partial void OnIdPartieChanged();
        partial void OnNumeroCoupChanging(long value);
        partial void OnNumeroCoupChanged();
        partial void OnNatureCoupChanging(string value);
        partial void OnNatureCoupChanged();
        partial void OnJoueurEnCourChanging(long value);
        partial void OnJoueurEnCourChanged();
        #endregion

        public DbGoban()
        {
            this._DbPartie  = default(EntityRef<DbPartie>);
            this._DbPions = new EntitySet<DbPion>(new Action<DbPion>(this.attach_DbPions), new Action<DbPion>(this.detach_DbPions));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdGoban in the schema.
        /// </summary>
        [Column(Name = @"idGoban", Storage = "_IdGoban", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdGoban
        {
            get
            {
                return this._IdGoban;
            }
            set
            {
                if (this._IdGoban != value)
                {
                    this.OnIdGobanChanging(value);
                    this.SendPropertyChanging();
                    this._IdGoban = value;
                    this.SendPropertyChanged("IdGoban");
                    this.OnIdGobanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPartie in the schema.
        /// </summary>
        [Column(Name = @"idPartie", Storage = "_IdPartie", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdPartie
        {
            get
            {
                return this._IdPartie;
            }
            set
            {
                if (this._IdPartie != value)
                {
                    if (this._DbPartie.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdPartieChanging(value);
                    this.SendPropertyChanging();
                    this._IdPartie = value;
                    this.SendPropertyChanged("IdPartie");
                    this.OnIdPartieChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroCoup in the schema.
        /// </summary>
        [Column(Name = @"numeroCoup", Storage = "_NumeroCoup", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long NumeroCoup
        {
            get
            {
                return this._NumeroCoup;
            }
            set
            {
                if (this._NumeroCoup != value)
                {
                    this.OnNumeroCoupChanging(value);
                    this.SendPropertyChanging();
                    this._NumeroCoup = value;
                    this.SendPropertyChanged("NumeroCoup");
                    this.OnNumeroCoupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NatureCoup in the schema.
        /// </summary>
        [Column(Name = @"natureCoup", Storage = "_NatureCoup", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string NatureCoup
        {
            get
            {
                return this._NatureCoup;
            }
            set
            {
                if (this._NatureCoup != value)
                {
                    this.OnNatureCoupChanging(value);
                    this.SendPropertyChanging();
                    this._NatureCoup = value;
                    this.SendPropertyChanged("NatureCoup");
                    this.OnNatureCoupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JoueurEnCour in the schema.
        /// </summary>
        [Column(Name = @"joueurEnCours", Storage = "_JoueurEnCour", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long JoueurEnCour
        {
            get
            {
                return this._JoueurEnCour;
            }
            set
            {
                if (this._JoueurEnCour != value)
                {
                    this.OnJoueurEnCourChanging(value);
                    this.SendPropertyChanging();
                    this._JoueurEnCour = value;
                    this.SendPropertyChanged("JoueurEnCour");
                    this.OnJoueurEnCourChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DbPartie in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbPartie_DbGoban", Storage="_DbPartie", ThisKey="IdPartie", OtherKey="IdPartie", IsForeignKey=true)]
        public DbPartie DbPartie
        {
            get
            {
                return this._DbPartie.Entity;
            }
            set
            {
                DbPartie previousValue = this._DbPartie.Entity;
                if ((previousValue != value) || (this._DbPartie.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DbPartie.Entity = null;
                        previousValue.DbGobans.Remove(this);
                    }
                    this._DbPartie.Entity = value;
                    if (value != null)
                    {
                        this._IdPartie = value.IdPartie;
                        value.DbGobans.Add(this);
                    }
                    else
                    {
                        this._IdPartie = default(long);
                    }
                    this.SendPropertyChanged("DbPartie");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DbPions in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbGoban_DbPion", Storage="_DbPions", ThisKey="IdGoban", OtherKey="IdGoban", DeleteRule="NO ACTION")]
        public EntitySet<DbPion> DbPions
        {
            get
            {
                return this._DbPions;
            }
            set
            {
                this._DbPions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DbPions(DbPion entity)
        {
            this.SendPropertyChanging("DbPions");
            entity.DbGoban = this;
        }
    
        private void detach_DbPions(DbPion entity)
        {
            this.SendPropertyChanging("DbPions");
            entity.DbGoban = null;
        }
    }

    /// <summary>
    /// There are no comments for DbGobansContext.DbJoueur in the schema.
    /// </summary>
    [Table(Name = @"goban.Joueurs")]
    public partial class DbJoueur : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdJoueur;

        private string _Nom;
        #pragma warning restore 0649

        private EntitySet<DbPartie> _DbParties_IdJoueurBlanc;

        private EntitySet<DbPartie> _DbParties_IdJoueurNoir;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdJoueurChanging(long value);
        partial void OnIdJoueurChanged();
        partial void OnNomChanging(string value);
        partial void OnNomChanged();
        #endregion

        public DbJoueur()
        {
            this._DbParties_IdJoueurBlanc = new EntitySet<DbPartie>(new Action<DbPartie>(this.attach_DbParties_IdJoueurBlanc), new Action<DbPartie>(this.detach_DbParties_IdJoueurBlanc));
            this._DbParties_IdJoueurNoir = new EntitySet<DbPartie>(new Action<DbPartie>(this.attach_DbParties_IdJoueurNoir), new Action<DbPartie>(this.detach_DbParties_IdJoueurNoir));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdJoueur in the schema.
        /// </summary>
        [Column(Name = @"idJoueur", Storage = "_IdJoueur", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdJoueur
        {
            get
            {
                return this._IdJoueur;
            }
            set
            {
                if (this._IdJoueur != value)
                {
                    this.OnIdJoueurChanging(value);
                    this.SendPropertyChanging();
                    this._IdJoueur = value;
                    this.SendPropertyChanged("IdJoueur");
                    this.OnIdJoueurChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nom in the schema.
        /// </summary>
        [Column(Name = @"nom", Storage = "_Nom", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nom
        {
            get
            {
                return this._Nom;
            }
            set
            {
                if (this._Nom != value)
                {
                    this.OnNomChanging(value);
                    this.SendPropertyChanging();
                    this._Nom = value;
                    this.SendPropertyChanged("Nom");
                    this.OnNomChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DbParties_IdJoueurBlanc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbJoueur_DbPartie", Storage="_DbParties_IdJoueurBlanc", ThisKey="IdJoueur", OtherKey="IdJoueurBlanc", DeleteRule="NO ACTION")]
        public EntitySet<DbPartie> DbParties_IdJoueurBlanc
        {
            get
            {
                return this._DbParties_IdJoueurBlanc;
            }
            set
            {
                this._DbParties_IdJoueurBlanc.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DbParties_IdJoueurNoir in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbJoueur_DbPartie1", Storage="_DbParties_IdJoueurNoir", ThisKey="IdJoueur", OtherKey="IdJoueurNoir", DeleteRule="NO ACTION")]
        public EntitySet<DbPartie> DbParties_IdJoueurNoir
        {
            get
            {
                return this._DbParties_IdJoueurNoir;
            }
            set
            {
                this._DbParties_IdJoueurNoir.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DbParties_IdJoueurBlanc(DbPartie entity)
        {
            this.SendPropertyChanging("DbParties_IdJoueurBlanc");
            entity.DbJoueurs_IdJoueurBlanc = this;
        }
    
        private void detach_DbParties_IdJoueurBlanc(DbPartie entity)
        {
            this.SendPropertyChanging("DbParties_IdJoueurBlanc");
            entity.DbJoueurs_IdJoueurBlanc = null;
        }

        private void attach_DbParties_IdJoueurNoir(DbPartie entity)
        {
            this.SendPropertyChanging("DbParties_IdJoueurNoir");
            entity.DbJoueurs_IdJoueurNoir = this;
        }
    
        private void detach_DbParties_IdJoueurNoir(DbPartie entity)
        {
            this.SendPropertyChanging("DbParties_IdJoueurNoir");
            entity.DbJoueurs_IdJoueurNoir = null;
        }
    }

    /// <summary>
    /// There are no comments for DbGobansContext.DbPartie in the schema.
    /// </summary>
    [Table(Name = @"goban.Partie")]
    public partial class DbPartie : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdPartie;

        private long _IdJoueurNoir;

        private System.Nullable<long> _IdJoueurBlanc;

        private string _EtatPartie = @"En cours";

        private System.DateTime _HeureDebut = DateTime.Now;

        private System.Nullable<System.DateTime> _HeureFin;
        #pragma warning restore 0649

        private EntitySet<DbGoban> _DbGobans;

        private EntityRef<DbJoueur> _DbJoueurs_IdJoueurBlanc;

        private EntityRef<DbJoueur> _DbJoueurs_IdJoueurNoir;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdPartieChanging(long value);
        partial void OnIdPartieChanged();
        partial void OnIdJoueurNoirChanging(long value);
        partial void OnIdJoueurNoirChanged();
        partial void OnIdJoueurBlancChanging(System.Nullable<long> value);
        partial void OnIdJoueurBlancChanged();
        partial void OnEtatPartieChanging(string value);
        partial void OnEtatPartieChanged();
        partial void OnHeureDebutChanging(System.DateTime value);
        partial void OnHeureDebutChanged();
        partial void OnHeureFinChanging(System.Nullable<System.DateTime> value);
        partial void OnHeureFinChanged();
        #endregion

        public DbPartie()
        {
            this._DbGobans = new EntitySet<DbGoban>(new Action<DbGoban>(this.attach_DbGobans), new Action<DbGoban>(this.detach_DbGobans));
            this._DbJoueurs_IdJoueurBlanc  = default(EntityRef<DbJoueur>);
            this._DbJoueurs_IdJoueurNoir  = default(EntityRef<DbJoueur>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdPartie in the schema.
        /// </summary>
        [Column(Name = @"idPartie", Storage = "_IdPartie", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdPartie
        {
            get
            {
                return this._IdPartie;
            }
            set
            {
                if (this._IdPartie != value)
                {
                    this.OnIdPartieChanging(value);
                    this.SendPropertyChanging();
                    this._IdPartie = value;
                    this.SendPropertyChanged("IdPartie");
                    this.OnIdPartieChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdJoueurNoir in the schema.
        /// </summary>
        [Column(Name = @"idJoueurNoir", Storage = "_IdJoueurNoir", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdJoueurNoir
        {
            get
            {
                return this._IdJoueurNoir;
            }
            set
            {
                if (this._IdJoueurNoir != value)
                {
                    if (this._DbJoueurs_IdJoueurNoir.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdJoueurNoirChanging(value);
                    this.SendPropertyChanging();
                    this._IdJoueurNoir = value;
                    this.SendPropertyChanged("IdJoueurNoir");
                    this.OnIdJoueurNoirChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdJoueurBlanc in the schema.
        /// </summary>
        [Column(Name = @"idJoueurBlanc", Storage = "_IdJoueurBlanc", DbType = "INT(10) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> IdJoueurBlanc
        {
            get
            {
                return this._IdJoueurBlanc;
            }
            set
            {
                if (this._IdJoueurBlanc != value)
                {
                    if (this._DbJoueurs_IdJoueurBlanc.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdJoueurBlancChanging(value);
                    this.SendPropertyChanging();
                    this._IdJoueurBlanc = value;
                    this.SendPropertyChanged("IdJoueurBlanc");
                    this.OnIdJoueurBlancChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EtatPartie in the schema.
        /// </summary>
        [Column(Name = @"etatPartie", Storage = "_EtatPartie", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string EtatPartie
        {
            get
            {
                return this._EtatPartie;
            }
            set
            {
                if (this._EtatPartie != value)
                {
                    this.OnEtatPartieChanging(value);
                    this.SendPropertyChanging();
                    this._EtatPartie = value;
                    this.SendPropertyChanged("EtatPartie");
                    this.OnEtatPartieChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeureDebut in the schema.
        /// </summary>
        [Column(Name = @"heureDebut", Storage = "_HeureDebut", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime HeureDebut
        {
            get
            {
                return this._HeureDebut;
            }
            set
            {
                if (this._HeureDebut != value)
                {
                    this.OnHeureDebutChanging(value);
                    this.SendPropertyChanging();
                    this._HeureDebut = value;
                    this.SendPropertyChanged("HeureDebut");
                    this.OnHeureDebutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeureFin in the schema.
        /// </summary>
        [Column(Name = @"heureFin", Storage = "_HeureFin", DbType = "TIMESTAMP NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> HeureFin
        {
            get
            {
                return this._HeureFin;
            }
            set
            {
                if (this._HeureFin != value)
                {
                    this.OnHeureFinChanging(value);
                    this.SendPropertyChanging();
                    this._HeureFin = value;
                    this.SendPropertyChanged("HeureFin");
                    this.OnHeureFinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DbGobans in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbPartie_DbGoban", Storage="_DbGobans", ThisKey="IdPartie", OtherKey="IdPartie", DeleteRule="NO ACTION")]
        public EntitySet<DbGoban> DbGobans
        {
            get
            {
                return this._DbGobans;
            }
            set
            {
                this._DbGobans.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DbJoueurs_IdJoueurBlanc in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbJoueur_DbPartie", Storage="_DbJoueurs_IdJoueurBlanc", ThisKey="IdJoueurBlanc", OtherKey="IdJoueur", IsForeignKey=true)]
        public DbJoueur DbJoueurs_IdJoueurBlanc
        {
            get
            {
                return this._DbJoueurs_IdJoueurBlanc.Entity;
            }
            set
            {
                DbJoueur previousValue = this._DbJoueurs_IdJoueurBlanc.Entity;
                if ((previousValue != value) || (this._DbJoueurs_IdJoueurBlanc.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DbJoueurs_IdJoueurBlanc.Entity = null;
                        previousValue.DbParties_IdJoueurBlanc.Remove(this);
                    }
                    this._DbJoueurs_IdJoueurBlanc.Entity = value;
                    if (value != null)
                    {
                        this._IdJoueurBlanc = value.IdJoueur;
                        value.DbParties_IdJoueurBlanc.Add(this);
                    }
                    else
                    {
                        this._IdJoueurBlanc = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("DbJoueurs_IdJoueurBlanc");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DbJoueurs_IdJoueurNoir in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbJoueur_DbPartie1", Storage="_DbJoueurs_IdJoueurNoir", ThisKey="IdJoueurNoir", OtherKey="IdJoueur", IsForeignKey=true)]
        public DbJoueur DbJoueurs_IdJoueurNoir
        {
            get
            {
                return this._DbJoueurs_IdJoueurNoir.Entity;
            }
            set
            {
                DbJoueur previousValue = this._DbJoueurs_IdJoueurNoir.Entity;
                if ((previousValue != value) || (this._DbJoueurs_IdJoueurNoir.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DbJoueurs_IdJoueurNoir.Entity = null;
                        previousValue.DbParties_IdJoueurNoir.Remove(this);
                    }
                    this._DbJoueurs_IdJoueurNoir.Entity = value;
                    if (value != null)
                    {
                        this._IdJoueurNoir = value.IdJoueur;
                        value.DbParties_IdJoueurNoir.Add(this);
                    }
                    else
                    {
                        this._IdJoueurNoir = default(long);
                    }
                    this.SendPropertyChanged("DbJoueurs_IdJoueurNoir");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DbGobans(DbGoban entity)
        {
            this.SendPropertyChanging("DbGobans");
            entity.DbPartie = this;
        }
    
        private void detach_DbGobans(DbGoban entity)
        {
            this.SendPropertyChanging("DbGobans");
            entity.DbPartie = null;
        }
    }

    /// <summary>
    /// There are no comments for DbGobansContext.DbPion in the schema.
    /// </summary>
    [Table(Name = @"goban.Pion")]
    public partial class DbPion : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdPion;

        private long _IdGoban;

        private byte _PositionX;

        private byte _PositionY;

        private string _Pioncol;

        private string _EtatPion = @"Vivant";

        private System.Nullable<int> _NumeroCoup;

        private System.DateTime _HeurePion = DateTime.Now;
        #pragma warning restore 0649

        private EntityRef<DbGoban> _DbGoban;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdPionChanging(long value);
        partial void OnIdPionChanged();
        partial void OnIdGobanChanging(long value);
        partial void OnIdGobanChanged();
        partial void OnPositionXChanging(byte value);
        partial void OnPositionXChanged();
        partial void OnPositionYChanging(byte value);
        partial void OnPositionYChanged();
        partial void OnPioncolChanging(string value);
        partial void OnPioncolChanged();
        partial void OnEtatPionChanging(string value);
        partial void OnEtatPionChanged();
        partial void OnNumeroCoupChanging(System.Nullable<int> value);
        partial void OnNumeroCoupChanged();
        partial void OnHeurePionChanging(System.DateTime value);
        partial void OnHeurePionChanged();
        #endregion

        public DbPion()
        {
            this._DbGoban  = default(EntityRef<DbGoban>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdPion in the schema.
        /// </summary>
        [Column(Name = @"idPion", Storage = "_IdPion", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdPion
        {
            get
            {
                return this._IdPion;
            }
            set
            {
                if (this._IdPion != value)
                {
                    this.OnIdPionChanging(value);
                    this.SendPropertyChanging();
                    this._IdPion = value;
                    this.SendPropertyChanged("IdPion");
                    this.OnIdPionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdGoban in the schema.
        /// </summary>
        [Column(Name = @"idGoban", Storage = "_IdGoban", CanBeNull = false, DbType = "INT(10) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdGoban
        {
            get
            {
                return this._IdGoban;
            }
            set
            {
                if (this._IdGoban != value)
                {
                    if (this._DbGoban.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdGobanChanging(value);
                    this.SendPropertyChanging();
                    this._IdGoban = value;
                    this.SendPropertyChanged("IdGoban");
                    this.OnIdGobanChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PositionX in the schema.
        /// </summary>
        [Column(Name = @"positionX", Storage = "_PositionX", CanBeNull = false, DbType = "TINYINT(3) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte PositionX
        {
            get
            {
                return this._PositionX;
            }
            set
            {
                if (this._PositionX != value)
                {
                    this.OnPositionXChanging(value);
                    this.SendPropertyChanging();
                    this._PositionX = value;
                    this.SendPropertyChanged("PositionX");
                    this.OnPositionXChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PositionY in the schema.
        /// </summary>
        [Column(Name = @"positionY", Storage = "_PositionY", CanBeNull = false, DbType = "TINYINT(3) UNSIGNED NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte PositionY
        {
            get
            {
                return this._PositionY;
            }
            set
            {
                if (this._PositionY != value)
                {
                    this.OnPositionYChanging(value);
                    this.SendPropertyChanging();
                    this._PositionY = value;
                    this.SendPropertyChanged("PositionY");
                    this.OnPositionYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pioncol in the schema.
        /// </summary>
        [Column(Storage = "_Pioncol", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pioncol
        {
            get
            {
                return this._Pioncol;
            }
            set
            {
                if (this._Pioncol != value)
                {
                    this.OnPioncolChanging(value);
                    this.SendPropertyChanging();
                    this._Pioncol = value;
                    this.SendPropertyChanged("Pioncol");
                    this.OnPioncolChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EtatPion in the schema.
        /// </summary>
        [Column(Name = @"etatPion", Storage = "_EtatPion", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string EtatPion
        {
            get
            {
                return this._EtatPion;
            }
            set
            {
                if (this._EtatPion != value)
                {
                    this.OnEtatPionChanging(value);
                    this.SendPropertyChanging();
                    this._EtatPion = value;
                    this.SendPropertyChanged("EtatPion");
                    this.OnEtatPionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroCoup in the schema.
        /// </summary>
        [Column(Name = @"numeroCoup", Storage = "_NumeroCoup", DbType = "INT(3) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NumeroCoup
        {
            get
            {
                return this._NumeroCoup;
            }
            set
            {
                if (this._NumeroCoup != value)
                {
                    this.OnNumeroCoupChanging(value);
                    this.SendPropertyChanging();
                    this._NumeroCoup = value;
                    this.SendPropertyChanged("NumeroCoup");
                    this.OnNumeroCoupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeurePion in the schema.
        /// </summary>
        [Column(Name = @"heurePion", Storage = "_HeurePion", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime HeurePion
        {
            get
            {
                return this._HeurePion;
            }
            set
            {
                if (this._HeurePion != value)
                {
                    this.OnHeurePionChanging(value);
                    this.SendPropertyChanging();
                    this._HeurePion = value;
                    this.SendPropertyChanged("HeurePion");
                    this.OnHeurePionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DbGoban in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DbGoban_DbPion", Storage="_DbGoban", ThisKey="IdGoban", OtherKey="IdGoban", IsForeignKey=true)]
        public DbGoban DbGoban
        {
            get
            {
                return this._DbGoban.Entity;
            }
            set
            {
                DbGoban previousValue = this._DbGoban.Entity;
                if ((previousValue != value) || (this._DbGoban.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DbGoban.Entity = null;
                        previousValue.DbPions.Remove(this);
                    }
                    this._DbGoban.Entity = value;
                    if (value != null)
                    {
                        this._IdGoban = value.IdGoban;
                        value.DbPions.Add(this);
                    }
                    else
                    {
                        this._IdGoban = default(long);
                    }
                    this.SendPropertyChanged("DbGoban");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
